import os, time
import xlwings as xw
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

OUT_FILE = os.path.abspath("ADP_Interactive_Dashboard2.xlsm")

def build_xlsm():
    if os.path.exists(OUT_FILE):
        os.remove(OUT_FILE)

    app = xw.App(visible=False)
    try:
        wb = app.books.add()
        sht = wb.sheets[0]
        sht.name = "Overview"

        # --- HEADER BAR ---
        sht.range("C3:K4").merge()
        sht.range("C3").value = "PTD / YTD Results\nUSA"
        # Background fill via xlwings (Interior)
        sht.range("C3").color = (46, 125, 50)  # deep green
        # We'll set font attributes & wrap with COM safely below.

        sht.range("L3:M4").merge()
        sht.range("L3").value = "Version 2.70"
        sht.range("L3").color = (33, 150, 243)  # blue bar on the right

        # Safely style header fonts & alignment via COM Range handles
        try:
            r_title = sht.api.Range("C3")
            r_title.Font.Size = 18
            r_title.Font.Bold = True
            r_title.Font.Color = 0xFFFFFF  # white
            r_title.WrapText = True
            r_title.HorizontalAlignment = -4108  # xlCenter
            r_title.VerticalAlignment = -4108    # xlCenter
        except Exception:
            # Fallback: font via openpyxl stage if COM font not available
            pass

        try:
            r_ver = sht.api.Range("L3")
            r_ver.Font.Size = 10
            r_ver.Font.Bold = True
            r_ver.Font.Color = 0xFFFFFF
            r_ver.HorizontalAlignment = -4152  # xlRight
            r_ver.VerticalAlignment = -4108    # xlCenter
        except Exception:
            pass

        # --- LABELS ---
        # Client Info
        sht.range("C6:F6").merge(); sht.range("C6").value = "Client Info"
        sht.range("C7").value = "Client Number:"
        sht.range("C8").value = "Company Name:"
        sht.range("C9").value = "Country:"
        sht.range("C10").value = "Language:"

        # Client Contact
        sht.range("H6:K6").merge(); sht.range("H6").value = "Client Contact"
        sht.range("H7").value = "Name:"
        sht.range("H8").value = "Phone Number:"
        sht.range("H9").value = "E-Mail:"
        sht.range("H10").value = "ADP Contact:"

        # Period
        sht.range("C12:F12").merge(); sht.range("C12").value = "Period"
        sht.range("C13").value = "Date Received:"
        sht.range("C14").value = "Date Processed:"

        # Transaction Overview
        sht.range("H12:K12").merge(); sht.range("H12").value = "Transaction Overview"
        sht.range("H13").value = "Record Type"
        sht.range("I13").value = "Record Count"
        sht.range("J13").value = "Total Records"

        # --- FORMATTING (xlwings stage) ---
        sht.range("C:K").api.EntireColumn.AutoFit()
        max_width = max([sht.range(f"{col}1").column_width for col in "CDEFGHIJK"])
        for col in "CDEFGHIJK":
            sht.range(f"{col}1").column_width = max_width + 4

        for r in range(6, 22):
            sht.range(f"{r}:{r}").row_height = 22

        wb.save(OUT_FILE)
        wb.close()
    finally:
        app.quit()

    # --- STYLING with openpyxl (reliable cross-version) ---
    wb2 = load_workbook(OUT_FILE, keep_vba=True)
    ws2 = wb2["Overview"]

    thin = Side(style='thin', color='000000')
    border = Border(left=thin, right=thin, top=thin, bottom=thin)
    gray_fill = PatternFill("solid", fgColor="F2F2F2")
    header_fill = PatternFill("solid", fgColor="D9EAD3")   # light green
    contact_fill = PatternFill("solid", fgColor="D0E0E3")  # light blue
    period_fill = PatternFill("solid", fgColor="FFF2CC")   # light yellow

    # Section headers (centered, bordered, filled)
    section_styles = {
        "C6": header_fill,
        "H6": contact_fill,
        "C12": period_fill,
        "H12": contact_fill
    }

    for cell, fill in section_styles.items():
        ws2[cell].font = Font(bold=True, size=12, color="000000")
        ws2[cell].fill = fill
        ws2[cell].border = border
        ws2[cell].alignment = Alignment(horizontal="center", vertical="center")

    # Make header fonts white if COM fallback didn’t apply
    ws2["C3"].font = Font(bold=True, size=18, color="FFFFFF")
    ws2["L3"].font = Font(bold=True, size=10, color="FFFFFF")
    ws2["C3"].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
    ws2["L3"].alignment = Alignment(horizontal="right", vertical="center")

    wb2.save(OUT_FILE)
    wb2.close()

    # --- ActiveX Controls & interactivity ---
    app2 = xw.App(visible=False)
    try:
        book = app2.books.open(OUT_FILE)
        sht = book.sheets["Overview"]

        def cell_left_top(row, col):
            rng = sht.api.Range(sht.api.Cells(row, col), sht.api.Cells(row, col))
            return rng.Left, rng.Top

        # Highlight input cells behind textboxes (visual hint)
        input_bg_rgb = (255, 255, 204)  # pale yellow
        for addr in ["D7","D8","D9","D10","I7","I8","I9","I10","D13","D14"]:
            try:
                sht.range(addr).color = input_bg_rgb
            except Exception:
                pass

        # Textboxes
        textboxes = [
            ("txtClientNumber", 7, 4, 200),
            ("txtCompanyName", 8, 4, 200),
            ("txtCountry", 9, 4, 150),
            ("txtLanguage", 10, 4, 150),
            ("txtContactName", 7, 9, 200),
            ("txtContactPhone", 8, 9, 200),
            ("txtContactEmail", 9, 9, 200),
            ("txtContactADP", 10, 9, 200),
            ("txtDateReceived", 13, 4, 150),
            ("txtDateProcessed", 14, 4, 150),
        ]
        for name, r, c, w in textboxes:
            left, top = cell_left_top(r, c)
            tb = sht.api.OLEObjects().Add(
                ClassType="Forms.TextBox.1", Link=False, DisplayAsIcon=False,
                Left=left+2, Top=top+2, Width=w, Height=20
            )
            tb.Name = name
            # Colors via BGR integer
            tb.Object.BackColor = (255 << 16) + (255 << 8) + 204  # pale yellow
            tb.Object.BorderStyle = 1

        # Checkbox
        left, top = cell_left_top(22, 3)
        chk = sht.api.OLEObjects().Add(
            ClassType="Forms.CheckBox.1", Link=False, DisplayAsIcon=False,
            Left=left+2, Top=top+2, Width=220, Height=20
        )
        chk.Name = "chkTestRun"
        chk.Object.Caption = "✅ Test Run (No Update)"

        # Buttons (use TextFrame2 for text styling to avoid .Font error)
        def styled_button(text, left, top, color_rgb):
            shape = sht.api.Shapes.AddShape(1, left, top, 160, 32)  # msoShapeRectangle
            # Fill
            shape.Fill.ForeColor.RGB = color_rgb
            shape.Line.Visible = False
            # Text via TextFrame2 (safer across builds)
            try:
                tf2 = shape.TextFrame2
                tf2.TextRange.Text = text
                tf2.TextRange.ParagraphFormat.Alignment = 2  # msoAlignCenter
                tf2.TextRange.Font.Bold = True
                tf2.TextRange.Font.Size = 12
                tf2.TextRange.Font.Fill.ForeColor.RGB = 0xFFFFFF  # white
            except Exception:
                # Fallback to legacy TextFrame if TextFrame2 isn’t available
                try:
                    shape.TextFrame.Characters().Text = text
                    shape.TextFrame.HorizontalAlignment = -4108  # xlCenter
                    # Some Excel builds expose .Characters().Font; handle gracefully:
                    try:
                        shape.TextFrame.Characters().Font.Size = 12
                        shape.TextFrame.Characters().Font.Bold = True
                        # Some builds lack .Font.Color on Characters; ignore if so.
                        shape.TextFrame.Characters().Font.Color = 0xFFFFFF
                    except Exception:
                        pass
                except Exception:
                    pass
            return shape

        left, top = cell_left_top(24, 3)
        styled_button("▶ Create Upload File", left, top, 0x2E7D32)   # green
        styled_button("⬆ Import Upload File", left+180, top, 0x1565C0)  # blue

        book.save(OUT_FILE)
        book.close()
    finally:
        app2.quit()

    print("✅ Interactive Dashboard generated at:", OUT_FILE)


if __name__ == "__main__":
    build_xlsm()
