# -*- coding: utf-8 -*-
import os
import time
import xlwings as xw
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

# ===== OUTPUT FILE (kept from Code 1) =====
OUT_FILE = os.path.abspath("ADP_Interactive_Dashboard(updated)1.xlsx")

def build_xlsm():
    # --- Fresh start: remove old file (Code 1 behavior) ---
    if os.path.exists(OUT_FILE):
        try:
            os.remove(OUT_FILE)
        except Exception as e:
            print("Could not remove existing file:", e)
            return

    # ===== PASS 1: Build layout & formatting via xlwings (from Code 1) =====
    app = xw.App(visible=False)
    try:
        wb = app.books.add()

        # Create Overview sheet
        sht = wb.sheets[0]
        sht.name = "Overview"

        # Column widths (from Code 1)
        widths = [3, 20, 30, 3, 20, 20, 15, 15]
        for i, w in enumerate(widths, start=1):
            sht.api.Columns(i).ColumnWidth = w

        # Show gridlines & hide headings (from Code 1)
        app.api.ActiveWindow.DisplayGridlines = True
        app.api.ActiveWindow.DisplayHeadings = False

        # Title (from Code 1)
        header_color = (59, 89, 152)
        sht.range("B2:G3").merge()
        sht.range("B2").value = "PTD/YTD Results - USA"
        sht.range("B2").api.Font.Size = 18
        sht.range("B2").api.Font.Bold = True
        sht.range("B2").color = header_color
        sht.range("B2").api.Font.Color = 0xFFFFFF
        sht.range("B2").api.HorizontalAlignment = -4108
        sht.range("B2").api.VerticalAlignment = -4108

        # Client Info (from Code 1)
        sht.range("B5:C9").color = (234, 242, 255)
        sht.range("B5:C5").merge(); sht.range("B5").value = "👤 Client Information"
        sht.range("B5").api.Font.Size = 12
        sht.range("B5").api.Font.Bold = True
        sht.range("B5").api.Font.Color = 0xFFFFFF
        sht.range("B6").value = "Client Number:"; sht.range("C6").value = ""
        sht.range("B7").value = "Company Name:";  sht.range("C7").value = ""
        sht.range("B8").value = "Country:";       sht.range("C8").value = "USA"
        sht.range("B9").value = "Language:";      sht.range("C9").value = "English"

        # Contact (from Code 1)
        sht.range("E5:G9").color = (234, 242, 255)
        sht.range("E5:G5").merge(); sht.range("E5").value = "📞 Contact Details"
        sht.range("E5").api.Font.Size = 12
        sht.range("E5").api.Font.Bold = True
        sht.range("E5").api.Font.Color = 0xFFFFFF
        sht.range("E6").value = "Name:"; sht.range("F6").value = ""; sht.range("F6:G6").merge()
        sht.range("E7").value = "Phone Number:"; sht.range("F7").value = ""; sht.range("F7:G7").merge()
        sht.range("E8").value = "Email:"; sht.range("F8").value = ""; sht.range("F8:G8").merge()
        sht.range("E9").value = "ADP Contact:"; sht.range("F9").value = ""; sht.range("F9:G9").merge()

        # Period (from Code 1)
        sht.range("B11:C13").color = (234, 242, 255)
        sht.range("B11:C11").merge(); sht.range("B11").value = "🗓️ Period"
        sht.range("B11").api.Font.Size = 12
        sht.range("B11").api.Font.Bold = True
        sht.range("B11").api.Font.Color = 0x2F5496
        sht.range("B12").value = "Date Received:"; sht.range("C12").value = ""
        sht.range("B13").value = "Date Processed:"; sht.range("C13").value = ""

        # Transaction Overview header area (from Code 1; data will be injected later like Code 2)
        sht.range("E11:G13").color = (234, 242, 255)
        sht.range("E11:G11").merge(); sht.range("E11").value = "🧾 Transaction Overview"
        sht.range("E11").api.Font.Size = 12
        sht.range("E11").api.Font.Bold = True
        sht.range("E11").api.Font.Color = 0x2F5496
        sht.range("E12").value = "Record Type"
        sht.range("F12").value = "Record Count"
        sht.range("G12").value = "Total Records"
        # We'll fill G13 via Code 2 logic; for now leave blank

        # Add hidden data holder sheet (as in Code 1; we'll also create TransactionData later)
        wb.sheets.add("Data").visible = False

        # ===== Create or ensure TransactionData sheet exists with sample data (from Code 2) =====
        try:
            data_sht = wb.sheets("TransactionData")
            print("TransactionData sheet already exists, will use existing data")
        except:
            print("Creating TransactionData sheet with sample data")
            data_sht = wb.sheets.add("TransactionData")
            data_sht.visible = False
            transactions_data = [
                ["Record Type", "Record Count"],
                ["Payroll", 120],
                ["Benefits", 85],
                ["Expenses", 45],
                ["Leave", 62],
                ["Training", 30],
                ["Travel", 18],
                ["Compliance", 12],
                ["Recruitment", 25],
                ["Onboarding", 38],
                ["Terminations", 15],
                ["Performance", 22],
                ["Compensation", 28]
            ]
            for i, row in enumerate(transactions_data, start=1):
                for j, value in enumerate(row, start=1):
                    data_sht.range(i, j).value = value

        # Save workbook (for subsequent openpyxl styling/protection like Code 1)
        wb.save(OUT_FILE)
        wb.close()
    finally:
        app.quit()

    time.sleep(0.5)

    # ===== PASS 2: Styling, borders, and protection via openpyxl (from Code 1) =====
    wb2 = load_workbook(OUT_FILE)
    ws2 = wb2["Overview"]

    border = Border(left=Side(style='medium'), right=Side(style='medium'),
                    top=Side(style='medium'), bottom=Side(style='medium'))
    blue_fill = PatternFill("solid", fgColor="2F5496")
    gray_fill = PatternFill("solid", fgColor="D9D9D9")
    light_fill = PatternFill("solid", fgColor="F2F2F2")

    # Style title cell (B2:G3)
    ws2.merge_cells("B2:G3")
    title = ws2["B2"]
    title.font = Font(size=20, bold=True, color="FFFFFF")
    title.fill = blue_fill
    title.alignment = Alignment(horizontal="center", vertical="center")

    # Section headers from Code 1
    for cell in ["B5", "E5", "B11", "E11"]:
        ws2[cell].font = Font(bold=True)
        ws2[cell].fill = gray_fill
        ws2[cell].border = border

    # Label rows borders (Code 1)
    for r in range(6, 10):
        for col in ["B", "C", "E", "F"]:
            ws2[f"{col}{r}"].border = border
        ws2[f"B{r}"].font = Font(bold=True)
        ws2[f"E{r}"].font = Font(bold=True)

    # Period rows (Code 1)
    for r in [12, 13]:
        ws2[f"B{r}"].font = Font(bold=True)
        ws2[f"B{r}"].border = border
        ws2[f"C{r}"].border = border

    # Transaction overview header row (Code 1 styling)
    for c in ["E12", "F12", "G12"]:
        cell = ws2[c]
        cell.font = Font(bold=True)
        cell.fill = light_fill
        cell.border = border
        cell.alignment = Alignment(horizontal="center")

    # Boxed borders (Code 1)
    for row in range(2, 15):
        if row in [4, 10, 14]:
            continue
        for col in ["B", "C", "D", "E", "F", "G"]:
            if col == "D" and row not in [2, 3]:
                continue
            ws2[f"{col}{row}"].border = border

    # ---- LOCK/UNLOCK CELLS (Code 1) ----
    # Lock all by default
    for row in ws2.iter_rows():
        for cell in row:
            cell.protection = cell.protection.copy(locked=True)

    # Unlock input cells (user-editable)
    input_cells = ["C6", "C7", "C12", "C13",  # Client Info & Period
                   "F6", "F7", "F8", "F9"]    # Contact Info
    for c in input_cells:
        ws2[c].protection = ws2[c].protection.copy(locked=False)

    # Also unlock TransactionData to allow user edits later (Code 2 intent)
    if "TransactionData" in wb2.sheetnames:
        ws_data = wb2["TransactionData"]
        for row in ws_data.iter_rows():
            for cell in row:
                cell.protection = cell.protection.copy(locked=False)

    # Protect sheet (Code 1)
    ws2.protection.sheet = True
    ws2.protection.password = "adp123"
    ws2.protection.enable()

    wb2.save(OUT_FILE)
    wb2.close()

    time.sleep(0.5)

    # ===== PASS 3: Dynamic Transaction Overview & Total Records (from Code 2) =====
    # Use xlwings to add ActiveX ListBox; fall back to cell rendering if needed
    app3 = xw.App(visible=True)
    try:
        book = app3.books.open(OUT_FILE)
        sht = book.sheets["Overview"]

        # Try to get TransactionData sheet
        try:
            data_sht = book.sheets["TransactionData"]
            data_exists = True
        except:
            data_exists = False
            print("TransactionData sheet not found")

        # Unprotect Overview to add controls
        try:
            sht.api.Unprotect("adp123")
        except:
            pass

        # Clear any existing data under the Transaction Overview area
        sht.range("E12:G100").clear()

        # Read data from TransactionData (skip header)
        transactions = []
        total_records = 0
        if data_exists:
            # Find last used row in TransactionData (simple heuristic)
            last_row = data_sht.range("A1048576").end('up').row
            if last_row >= 2:
                data_values = data_sht.range(f"A2:B{last_row}").value
                if data_values:
                    # Ensure iterable of rows
                    if isinstance(data_values[0], list):
                        rows_iter = data_values
                    else:
                        rows_iter = [data_values]
                    for row in rows_iter:
                        if row and row[0] and (row[1] is not None):
                            transactions.append((row[0], row[1]))
                            if isinstance(row[1], (int, float)):
                                total_records += row[1]

        # Fallback data if none found (Code 2)
        if not transactions:
            print("No data found in TransactionData sheet, using fallback data")
            fallback_data = [
                ("Payroll", 120),
                ("Benefits", 85),
                ("Expenses", 45),
                ("Leave", 62),
                ("Training", 30),
                ("Travel", 18),
                ("Compliance", 12)
            ]
            transactions = fallback_data
            total_records = sum(rec[1] for rec in fallback_data)

        # Try to add ActiveX ListBox aligned with Transaction Overview section
        try:
            listbox_cell = sht.range("E12")
            left = listbox_cell.left
            top = listbox_cell.top
            width = sht.range("E11:G11").width - 5
            height = 100

            lb = sht.api.OLEObjects().Add(ClassType="Forms.ListBox.1",
                                          Left=left, Top=top,
                                          Width=width, Height=height)
            lb.Name = "lstTransactions"
            lb.Object.MultiSelect = 0
            lb.Object.ColumnCount = 2
            lb.Object.ColumnWidths = "200;80"
            lb.Object.IntegralHeight = False
            lb.Object.ColumnHeads = True

            data = [["Record Type", "Record Count"]]
            for rec in transactions:
                data.append([rec[0], rec[1]])
            lb.Object.List = data

            # Optional cosmetics
            try:
                lb.Object.ScrollBars = 3  # both
                lb.Object.BackColor = 0xF0F8FF
                lb.Object.BorderColor = 0x2F5496
                lb.Object.BorderStyle = 1
                lb.Object.Font.Size = 10
                lb.Object.Font.Name = "Calibri"
            except:
                pass

            print("ActiveX ListBox created successfully!")

        except Exception as e:
            print(f"Error creating ListBox: {e}")
            # Fallback: render data in cells under headers (keeps Code 1 layout)
            start_row = 13  # below header row E12:F12
            for i, (typ, cnt) in enumerate(transactions, start=start_row):
                sht.range(f"E{i}").value = typ
                sht.range(f"F{i}").value = cnt
                sht.range(f"E{i}").api.HorizontalAlignment = -4131  # left
                sht.range(f"F{i}").api.HorizontalAlignment = -4152  # right

        # Display Total Records (use Code 2 placement but keep Code 1 feel)
        # We'll show total in B15 as a bold label
        sht.range("B15").value = f"Total Records: {int(total_records)}"
        sht.range("B15").api.Font.Bold = True
        sht.range("B15").api.Font.Size = 12

        # Re-protect Overview sheet strongly (Code 2 approach)
        try:
            sht.api.Protect("adp123",
                            DrawingObjects=True,
                            Contents=True,
                            Scenarios=True,
                            UserInterfaceOnly=True,
                            AllowFormattingCells=False,
                            AllowFormattingColumns=False,
                            AllowFormattingRows=False,
                            AllowInsertingColumns=False,
                            AllowInsertingRows=False,
                            AllowInsertingHyperlinks=False,
                            AllowDeletingColumns=False,
                            AllowDeletingRows=False,
                            AllowSorting=False,
                            AllowFiltering=False,
                            AllowUsingPivotTables=False)
        except:
            pass

        # Protect workbook structure (Code 2)
        try:
            book.api.Protect("adp123", Structure=True)
        except:
            pass

        # Protect TransactionData but keep content editable (cells are unlocked above)
        try:
            ds = book.sheets["TransactionData"]
            ds.api.Protect("adp123", Contents=True, UserInterfaceOnly=True)
        except:
            pass

        book.save(OUT_FILE)
        book.close()

    except Exception as e:
        print(f"Error during Transaction Overview setup: {e}")
    finally:
        app3.quit()

    print("✅ ADP_Interactive_Dashboard.xlsx created at:", OUT_FILE)
    print("🔒 Protection:")
    print("   - Password: adp123")
    print("   - Only specific cells are editable on Overview (C6, C7, C12, C13, F6, F7, F8, F9)")
    print("   - TransactionData sheet cells are unlocked for editing (sheet protected for structure)")
    print("   - Workbook structure protected")

if __name__ == "__main__":
    build_xlsm()
