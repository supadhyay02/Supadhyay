import os
import time
import xlwings as xw
import psutil

# Get the current directory and create the file path
current_dir = os.getcwd()
OUT_FILE = os.path.join(current_dir, "ADP_Interactive_Dashboard.xlsx")

def kill_excel_processes():
    """Force close any Excel processes"""
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] and 'excel' in proc.info['name'].lower():
                proc.kill()
                time.sleep(0.5)
    except:
        pass

def create_dashboard():
    """Create a dynamic dashboard that works with YOUR existing sheets"""
    # Kill any existing Excel processes first
    kill_excel_processes()
    time.sleep(2)
    
    # Remove existing file if it exists
    if os.path.exists(OUT_FILE):
        try:
            os.remove(OUT_FILE)
            time.sleep(1)
        except:
            print("⚠️ Could not remove existing file. It might be locked.")
            return

    try:
        # =============================================
        # STEP 1: OPEN YOUR EXISTING WORKBOOK WITH YOUR SHEETS
        # =============================================
        print("📂 Please select your Excel file with your sheets...")
        
        # You'll need to modify this path to point to YOUR Excel file
        YOUR_EXCEL_FILE = r"C:\Path\To\Your\Workbook.xlsx"  # ← CHANGE THIS PATH
        
        # Open your existing workbook
        app = xw.App(visible=False)
        wb = app.books.open(YOUR_EXCEL_FILE)
        
        # =============================================
        # STEP 2: CREATE THE DASHBOARD OVERVIEW SHEET
        # =============================================
        # Add a new sheet for the dashboard
        sht = wb.sheets.add("Overview")
        sht.activate()
        
        print("✅ Overview sheet created successfully")
        
        # Get all your existing sheet names (except Overview & Reference)
        sheet_names = [
            sheet.name for sheet in wb.sheets
            if sheet.name.lower() not in ["overview", "reference"]
        ]
        print(f"📊 Found {len(sheet_names)} sheets: {', '.join(sheet_names)}")

        # Setup premium Overview sheet formatting
        widths = [2, 22, 28, 2, 22, 18, 18, 18]
        for i, w in enumerate(widths, start=1):
            sht.api.Columns(i).ColumnWidth = w

        # Hide gridlines and headings for clean look
        app.api.ActiveWindow.DisplayGridlines = False
        app.api.ActiveWindow.DisplayHeadings = False

        # === EXPLOSIVE HEADER ===
        sht.range("B2:G3").merge()
        sht.range("B2").value = " PTD/YTD RESULTS - USA "
        sht.range("B2").api.Font.Size = 20
        sht.range("B2").api.Font.Bold = True
        sht.range("B2").api.Font.Color = 0xFFFFFF
        sht.range("B2").color = (30, 70, 140)
        sht.range("B2").api.HorizontalAlignment = -4108
        sht.range("B2").api.VerticalAlignment = -4108
        
        # Header accent
        sht.range("B4:G4").merge()
        sht.range("B4").color = (255, 0, 0)
        sht.range("B4").api.RowHeight = 3

        # === PREMIUM CLIENT INFO SECTION ===
        sht.range("B6:C10").color = (245, 249, 255)
        sht.range("B6:C6").merge()
        sht.range("B6").value = "📋 CLIENT INFORMATION"
        sht.range("B6").api.Font.Size = 12
        sht.range("B6").api.Font.Bold = True
        sht.range("B6").api.Font.Color = 0x2F5496
        sht.range("B6").api.HorizontalAlignment = -4108
        
        # Modern icon labels with predefined values
        icon_labels = [
            "🔢 Client Number:", 
            "🏢 Company Name:", 
            "🌎 Country:", 
            "💬 Language:"
        ]
        
        predefined_values = ["", "", "USA", "English"]
        
        for i, (label, value) in enumerate(zip(icon_labels, predefined_values), start=7):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"B{i}").api.Font.Color = 0x44546A
            sht.range(f"C{i}").value = value
            sht.range(f"C{i}").color = (255, 255, 255)
            sht.range(f"C{i}").api.Borders.LineStyle = 1
            sht.range(f"C{i}").api.Borders.Weight = 2
            sht.range(f"C{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"C{i}").api.Font.Color = 0x2F5496

        # === PREMIUM CONTACT DETAILS SECTION ===
        sht.range("E6:G10").color = (245, 249, 255)
        sht.range("E6:G6").merge()
        sht.range("E6").value = "📞 CONTACT DETAILS"
        sht.range("E6").api.Font.Size = 12
        sht.range("E6").api.Font.Bold = True
        sht.range("E6").api.Font.Color = 0x2F5496
        sht.range("E6").api.HorizontalAlignment = -4108
        
        contact_icons = ["👤 Name:", "📱 Phone:", "📧 Email:", "🤝 ADP Contact:"]
        for i, label in enumerate(contact_icons, start=7):
            sht.range(f"E{i}").value = label
            sht.range(f"E{i}").api.Font.Bold = True
            sht.range(f"E{i}").api.Font.Color = 0x44546A
            sht.range(f"F{i}").value = ""
            sht.range(f"F{i}:G{i}").merge()
            sht.range(f"F{i}:G{i}").color = (255, 255, 255)
            sht.range(f"F{i}:G{i}").api.Borders.LineStyle = 1
            sht.range(f"F{i}:G{i}").api.Borders.Weight = 2
            sht.range(f"F{i}:G{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"F{i}:G{i}").api.Font.Color = 0x2F5496

        # === PREMIUM REPORTING PERIOD ===
        sht.range("B12:C14").color = (245, 249, 255)
        sht.range("B12:C12").merge()
        sht.range("B12").value = "📅 PERIOD"
        sht.range("B12").api.Font.Size = 12
        sht.range("B12").api.Font.Bold = True
        sht.range("B12").api.Font.Color = 0x2F5496
        sht.range("B12").api.HorizontalAlignment = -4108
        
        period_labels = ["📥 Date Received:", "📤 Date Processed:"]
        for i, label in enumerate(period_labels, start=13):
            sht.range(f"B{i}").value = label
            sht.range(f"B{i}").api.Font.Bold = True
            sht.range(f"B{i}").api.Font.Color = 0x44546A
            sht.range(f"C{i}").value = ""
            sht.range(f"C{i}").color = (255, 255, 255)
            sht.range(f"C{i}").api.Borders.LineStyle = 1
            sht.range(f"C{i}").api.Borders.Weight = 2
            sht.range(f"C{i}").api.Borders.Color = 0xE3E8F0
            sht.range(f"C{i}").api.Font.Color = 0x2F5496

        # === STUNNING TOTAL RECORDS CARD ===
        sht.range("B16:C17").color = (30, 70, 140)
        sht.range("B16:C17").merge()
        sht.range("B16").value = "📊 TOTAL RECORDS"
        sht.range("B16").api.Font.Bold = True
        sht.range("B16").api.Font.Size = 14
        sht.range("B16").api.Font.Color = 0xFFFFFF
        sht.range("B16").api.HorizontalAlignment = -4108
        sht.range("B16").api.VerticalAlignment = -4108
        
        # Add shadow effect with borders
        sht.range("B16:C17").api.Borders.LineStyle = 1
        sht.range("B16:C17").api.Borders.Weight = 4
        sht.range("B16:C17").api.Borders.Color = 0x1E468C

        # === EXPLOSIVE WORKBOOK ANALYTICS ===
        sht.range("E12:G50").color = (245, 249, 255)
        sht.range("E12:G12").merge()
        sht.range("E12").value = "📈 TRANSACTION OVERVIEW"
        sht.range("E12").api.Font.Size = 12
        sht.range("E12").api.Font.Bold = True
        sht.range("E12").api.Font.Color = 0x2F5496
        sht.range("E12").api.HorizontalAlignment = -4108
        
        # Premium table headers
        sht.range("E13").value = "📁 RECORD TYPE"
        sht.range("F13").value = "🔢 COUNT"
        sht.range("E13:F13").api.Font.Bold = True
        sht.range("E13:F13").color = (30, 70, 140)
        sht.range("E13:F13").api.Font.Color = 0xFFFFFF
        sht.range("E13:F13").api.HorizontalAlignment = -4108
        
        # Add modern borders to header
        sht.range("E13:F13").api.Borders.LineStyle = 1
        sht.range("E13:F13").api.Borders.Weight = 2
        sht.range("E13:F13").api.Borders.Color = 0x1E468C

        # === AUTO-UPDATING FORMULAS ===
        # Show ALL sheets
        start_row = 14
        
        # Add scroll up indicator at the top if we have many sheets
        if len(sheet_names) > 10:
            sht.range(f"E{start_row-1}").value = "▲ Scroll ▲"
            sht.range(f"E{start_row-1}").api.Font.Size = 8
            sht.range(f"E{start_row-1}").api.Font.Color = 0x808080
            sht.range(f"E{start_row-1}").api.HorizontalAlignment = -4108
            
        # Add ALL your sheet names and formulas
        for i, sheet_name in enumerate(sheet_names, start=0):
            row = start_row + i
            sht.range(f"E{row}").value = f"📄 {sheet_name}"
            sht.range(f"E{row}").api.Font.Color = 0x44546A
            
            # Formula to count rows from row 4 where ANY column has input
            safe_sheet_name = sheet_name.replace("'", "''")  # escape single quotes
            formula = (
                f"=SUMPRODUCT((ROW('{safe_sheet_name}'!4:1048576)>=4)*"
                f"(MMULT(--(LEN('{safe_sheet_name}'!4:1048576)<>0),"
                f"TRANSPOSE(COLUMN('{safe_sheet_name}'!4:4)^0))>0))"
            )
            sht.range(f"F{row}").formula = formula
            sht.range(f"F{row}").api.Font.Bold = True
            sht.range(f"F{row}").api.Font.Color = 0x2F5496
            sht.range(f"F{row}").api.HorizontalAlignment = -4108
            
            # Modern alternating row colors
            if i % 2 == 0:
                sht.range(f"E{row}:F{row}").color = (255, 255, 255)
            else:
                sht.range(f"E{row}:F{row}").color = (250, 252, 255)
            
            # Premium borders
            sht.range(f"E{row}:F{row}").api.Borders.LineStyle = 1
            sht.range(f"E{row}:F{row}").api.Borders.Weight = 2
            sht.range(f"E{row}:F{row}").api.Borders.Color = 0xE3E8F0
        
        # Add scroll down indicator at the bottom if we have many sheets
        if len(sheet_names) > 10:
            scroll_bottom_row = start_row + len(sheet_names)
            sht.range(f"E{scroll_bottom_row}").value = "▼ Scroll ▼"
            sht.range(f"E{scroll_bottom_row}").api.Font.Size = 8
            sht.range(f"E{scroll_bottom_row}").api.Font.Color = 0x808080
            sht.range(f"E{scroll_bottom_row}").api.HorizontalAlignment = -4108
        
        # Total records formula with premium styling
        sht.range("B16").formula = '="📊 Total: " & TEXT(SUM(F14:F100),"#,##0") & " records"'

        # Set calculation to automatic
        app.api.Calculation = -4105
        
        # === APPLY PROTECTION ===
        print("🔒 Applying protection...")
        
        # First, unlock ALL cells
        sht.api.Cells.Locked = False
        
        # Now lock specific ranges
        labels_to_protect = [
            "B2", "B4", "B6", "B7", "B8", "B9", "B10", 
            "C9", "C10", "E6", "E7", "E8", "E9", "E10",
            "B12", "B13", "B14", "B16", "E12", "E13", "F13"
        ]
        
        # Add ALL sheet name labels to protection
        for i in range(len(sheet_names)):
            labels_to_protect.append(f"E{start_row + i}")
        
        # Add scroll indicators to protection if they exist
        if len(sheet_names) > 10:
            labels_to_protect.append(f"E{start_row-1}")
            labels_to_protect.append(f"E{start_row + len(sheet_names)}")
        
        # Lock all protected cells
        for cell_ref in labels_to_protect:
            try:
                sht.range(cell_ref).api.Locked = True
            except:
                pass
        
        # Define cells to keep EDITABLE
        editable_cells = ["C7", "C8", "F7", "F8", "F9", "F10", "C13", "C14"]
        
        # Add formula cells to editable list
        for i in range(len(sheet_names)):
            editable_cells.append(f"F{start_row + i}")
        
        # Keep editable cells unlocked
        for cell_ref in editable_cells:
            try:
                sht.range(cell_ref).api.Locked = False
            except:
                pass
        
        # Enable sheet protection with password
        sht.api.Protect(Password='adp123', DrawingObjects=True, Contents=True, Scenarios=True)
        
        sht.activate()
        app.api.ActiveWindow.Zoom = 90
        
        # Freeze panes to keep headers visible when scrolling
        sht.api.Activate()
        sht.api.Range("A13").Select()
        app.api.ActiveWindow.FreezePanes = True
        
        # Save the workbook
        wb.save()
        print("✅ Dashboard saved successfully with protection")
        
        wb.close()
        app.quit()
        
        print(f"✅ DYNAMIC Dashboard created with {len(sheet_names)} of YOUR sheets! 💥")
        print(f"📍 Location: {YOUR_EXCEL_FILE}")
        print(f"📊 Your sheets: {', '.join(sheet_names)}")
        
    except Exception as e:
        print(f"❌ Error creating dashboard: {e}")
        try:
            app.quit()
        except:
            pass

if __name__ == "__main__":
    print("🚀 Creating Dynamic Dashboard for YOUR sheets...")
    create_dashboard()
